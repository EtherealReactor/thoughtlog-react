// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`DumbComponent === Header must match snapshot 1`] = `
<Router
  history={
    Object {
      "action": "POP",
      "block": [Function],
      "canGo": [Function],
      "createHref": [Function],
      "entries": Array [
        Object {
          "hash": "",
          "key": "ram",
          "pathname": "/",
          "search": "",
        },
      ],
      "go": [Function],
      "goBack": [Function],
      "goForward": [Function],
      "index": 0,
      "length": 1,
      "listen": [Function],
      "location": Object {
        "hash": "",
        "key": "ram",
        "pathname": "/",
        "search": "",
      },
      "push": [Function],
      "replace": [Function],
    }
  }
>
  <Header />
</Router>
`;

exports[`SmartComponent === Header must match snapshot 1`] = `
<MemoryRouter
  initialEntries={
    Array [
      Object {
        "key": "ram",
        "pathname": "/",
      },
    ]
  }
>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "canGo": [Function],
        "createHref": [Function],
        "entries": Array [
          Object {
            "hash": "",
            "key": "ram",
            "pathname": "/",
            "search": "",
          },
        ],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "index": 0,
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "key": "ram",
          "pathname": "/",
          "search": "",
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <Provider
      store={
        Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        }
      }
    >
      <withRouter(Connect(Header))>
        <Route
          render={[Function]}
        >
          <Connect(Header)
            history={
              Object {
                "action": "POP",
                "block": [Function],
                "canGo": [Function],
                "createHref": [Function],
                "entries": Array [
                  Object {
                    "hash": "",
                    "key": "ram",
                    "pathname": "/",
                    "search": "",
                  },
                ],
                "go": [Function],
                "goBack": [Function],
                "goForward": [Function],
                "index": 0,
                "length": 1,
                "listen": [Function],
                "location": Object {
                  "hash": "",
                  "key": "ram",
                  "pathname": "/",
                  "search": "",
                },
                "push": [Function],
                "replace": [Function],
              }
            }
            location={
              Object {
                "hash": "",
                "key": "ram",
                "pathname": "/",
                "search": "",
              }
            }
            match={
              Object {
                "isExact": true,
                "params": Object {},
                "path": "/",
                "url": "/",
              }
            }
          >
            <Header
              history={
                Object {
                  "action": "POP",
                  "block": [Function],
                  "canGo": [Function],
                  "createHref": [Function],
                  "entries": Array [
                    Object {
                      "hash": "",
                      "key": "ram",
                      "pathname": "/",
                      "search": "",
                    },
                  ],
                  "go": [Function],
                  "goBack": [Function],
                  "goForward": [Function],
                  "index": 0,
                  "length": 1,
                  "listen": [Function],
                  "location": Object {
                    "hash": "",
                    "key": "ram",
                    "pathname": "/",
                    "search": "",
                  },
                  "push": [Function],
                  "replace": [Function],
                }
              }
              location={
                Object {
                  "hash": "",
                  "key": "ram",
                  "pathname": "/",
                  "search": "",
                }
              }
              match={
                Object {
                  "isExact": true,
                  "params": Object {},
                  "path": "/",
                  "url": "/",
                }
              }
              signup={[Function]}
              user={
                Object {
                  "errors": Array [],
                  "token": "",
                }
              }
            >
              <div>
                <header>
                  <div>
                    <div>
                      <h1>
                        <span>
                          Thought
                        </span>
                        <span>
                          Log
                        </span>
                      </h1>
                    </div>
                    <nav>
                      <ul>
                        <li>
                          <NavLink
                            activeClassName="active"
                            ariaCurrent="true"
                            to="/log_in"
                          >
                            <Route
                              path="/log_in"
                            >
                              <Link
                                aria-current={false}
                                replace={false}
                                to="/log_in"
                              >
                                <a
                                  aria-current={false}
                                  href="/log_in"
                                  onClick={[Function]}
                                >
                                  Log in
                                </a>
                              </Link>
                            </Route>
                          </NavLink>
                        </li>
                        <li>
                          <NavLink
                            activeClassName="active"
                            ariaCurrent="true"
                            to="/sign_up"
                          >
                            <Route
                              path="/sign_up"
                            >
                              <Link
                                aria-current={false}
                                replace={false}
                                to="/sign_up"
                              >
                                <a
                                  aria-current={false}
                                  href="/sign_up"
                                  onClick={[Function]}
                                >
                                  Sign up
                                </a>
                              </Link>
                            </Route>
                          </NavLink>
                        </li>
                      </ul>
                    </nav>
                  </div>
                </header>
                <Switch />
              </div>
            </Header>
          </Connect(Header)>
        </Route>
      </withRouter(Connect(Header))>
    </Provider>
  </Router>
</MemoryRouter>
`;
